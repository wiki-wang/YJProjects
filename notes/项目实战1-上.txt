unitest
	--不适合做UI自动化，初始化清除、选择用例执行，灵活性方面，不如RF
-pytest在国内的使用，不如RF广泛


目录结构：
	pylib：RF用python实现的测试库
	rflib：资源文件，包括用户关键字，变量的定义
	tc：测试用例
	cfg：配置文件
	
测试用例目录结构存放的方式：
	用例目录设计原则：
		根据功能点：
			--与手工用例成对应关系
			--优点，直白易懂，查找方便
			--但是手工测试的用例结构，一直在变化，自动化用例也得跟着变，非常累。
			--因为自动化测试的目录结构经常变动，依赖关系初始化动作也经常变更，非常累。
			--每个用例的初始化、清除 动作不一样，有时候数据差异非常大，造成造成大量的初始化和清除动作，非常的耗费时间
		
		根据数据环境：
			自动化用例的目录结构，就决定了用例初始化动作的层次关系。
			
		原则：
			--把 方便数据环境的设置  作为最高优先级
			
			
		目录结构的安排，一定要根据数据环境来定义。
		
		推荐做法：
			数据环境，执行用例前的 初始化操作。
			
			目录结构中，如果目录的命名中，以 d- 开头，表示这个目录中会有init.robot创建数据环境,会有setup动作
			
			
			d-空白数据：空白数据环境
				d-1班：只有1个班级
					d-老师jcy:只有1个老师jcy
						d-有学生stu1_stu2
					老师管理
			
			初始化和清除 非常重要！！！！！！
				
			根据目录名字，就可以知道目录是怎样的数据环境。
		


	